/*
==============================================================
Stored Procedure: Load Silver Layer 
==============================================================
Script Purpose:
  To load data into the 'silver' schema from 'bronze' layer files.
  -It truncates tables, emptying the existing data
  -Use 'INSERT INTO' command to load data from 'bronze' layer tables to silver tables

Execute the procedure using:
  EXEC silver.load_silver;
==============================================================
*/



CREATE OR ALTER PROCEDURE silver.load_silver AS
BEGIN
	DECLARE @start_time DATETIME, @end_time DATETIME, @batch_start_time DATETIME, @batch_end_time DATETIME;
	BEGIN TRY
		SET @batch_start_time = GETDATE();
		PRINT('==============================================================');
		PRINT('Loading Silver Layer');
		PRINT('==============================================================');

		PRINT('------------------------------------');
		PRINT('Loading CRM Tables');
		PRINT('------------------------------------');
		--==================================
		--Table 1
		--==================================
		SET @start_time = GETDATE();
		PRINT '>>Truncating Data';
		TRUNCATE TABLE silver.crm_cust_info;
		PRINT 'Inserting Data Into: silver.crm_cust_info';
		INSERT INTO silver.crm_cust_info (
			cst_id,
			cst_key,
			cst_firstname,
			cst_lastname,
			cst_marital_status,
			cst_gndr,
			cst_create_date)

		SELECT
			[cst_id],
			[cst_key],
			--Trimming words with extra blank spaces
			TRIM([cst_firstname]) AS cst_firstname,
			TRIM([cst_lastname]) AS cst_lastname,
    
			--Data normalization/standardization
			--Handling missing data with 'ELSE'
			CASE
				WHEN UPPER(TRIM(cst_marital_status)) = 'M' THEN 'Married'
				WHEN UPPER(TRIM(cst_marital_status)) = 'S' THEN 'Singal'
				ELSE 'Unknown'
			END as cst_marital_status,
			CASE
				WHEN UPPER(TRIM(cst_gndr)) = 'M' THEN 'Male'
				WHEN UPPER(TRIM(cst_gndr)) = 'F' THEN 'Female'
				ELSE 'Unknown'
			END AS cst_gndr,
			[cst_create_date]
		FROM (
			--Removing Duplicates and Filtering
			SELECT 
				*,
				ROW_NUMBER() OVER(PARTITION BY cst_id ORDER BY cst_create_date DESC) AS cst_rank
			FROM bronze.crm_cust_info
			WHERE cst_id IS NOT NULL
		) AS t
		WHERE cst_rank = 1;
		
		SET @end_time = GETDATE();
		PRINT 'Load Duration : ' + CAST(DATEDIFF(SECOND, @start_time, @end_time) as NVARCHAR) + ' seconds';
		PRINT '------------------------';

		--==================================
		--Table 2
		--==================================
		SET @start_time = GETDATE();
		PRINT '>>Truncating Data';
		TRUNCATE TABLE silver.crm_product_info;
		PRINT 'Inserting Data Into: silver.crm_product_info';
		INSERT INTO silver.crm_product_info (
			prd_id,
			cat_id,
			prd_key,
			prd_nm,
			prd_cost,
			prd_line,
			prd_start_dt,
			prd_end_dt
		)
		SELECT
			[prd_id],
			REPLACE(SUBSTRING(prd_key, 1, 5), '-','_') AS cat_id, --Extract category id
			SUBSTRING(prd_key, 7, LEN(prd_key)) AS prd_key,       --Extract product key
			[prd_nm],
			ISNULL([prd_cost],0) AS prd_cost,                     --Null handling
			CASE UPPER(TRIM(prd_line))                            --Mapping product line code to descriptive values
				WHEN 'M' THEN 'Mountain'
				WHEN 'R' THEN 'Road'
				WHEN 'S' THEN 'Other Sales'
				WHEN 'T' THEN 'Touring'
				ELSE 'Unknown'
			END AS prd_line,
			CAST([prd_start_dt] AS DATE) AS prd_start_dt,         --Changing datatype to date
			CAST(
				LEAD(prd_start_dt, 1) OVER(PARTITION BY prd_key ORDER BY prd_start_dt ASC) - 1 
				AS DATE
				) AS prd_end_dt                                   --Calculate the end date which is 1 less than start date
		FROM bronze.crm_product_info;

		SET @end_time = GETDATE();
		PRINT 'Load Duration : ' + CAST(DATEDIFF(SECOND, @start_time, @end_time) as NVARCHAR) + ' seconds';
		PRINT '------------------------';


		--==================================
		--Table 3
		--==================================
		SET @start_time = GETDATE();
		PRINT '>>Truncating Data';
		TRUNCATE TABLE silver.crm_sales_details;
		PRINT 'Inserting Data Into: silver.crm_sales_details';
		INSERT INTO silver.crm_sales_details (
			sls_ord_num,
			sls_prd_key,
			sls_cust_id,
			sls_order_dt,
			sls_ship_dt,
			sls_due_dt,
			sls_sales,
			sls_quantity,
			sls_price
		)

		SELECT
			sls_ord_num,
			sls_prd_key,
			sls_cust_id,
			CASE
				WHEN sls_order_dt = 0 or LEN(sls_order_dt) != 8 THEN NULL
				ELSE CAST(CAST(sls_order_dt AS VARCHAR) AS DATE)
			END AS sls_order_dt,
	
			CASE
				WHEN sls_ship_dt = 0 or LEN(sls_ship_dt) != 8 THEN NULL
				ELSE CAST(CAST(sls_ship_dt AS VARCHAR) AS DATE)
			END AS sls_ship_dt,
	
			CASE
				WHEN sls_due_dt = 0 or LEN(sls_due_dt) != 8 THEN NULL
				ELSE CAST(CAST(sls_due_dt AS VARCHAR) AS DATE)
			END AS sls_due_dt,
	
			CASE
				WHEN 
					sls_sales IS NULL 
					OR sls_sales <= 0 
					OR sls_sales != sls_quantity * ABS(sls_price) 
				THEN
					sls_quantity * ABS(sls_price)
				ELSE sls_sales
			END AS sls_sales,
	
			sls_quantity,
	
			CASE
				WHEN
					sls_price IS NULL
					OR sls_price <= 0
				THEN
					sls_sales / NULLIF(sls_quantity,0)
				ELSE sls_price
			END AS sls_price
		FROM bronze.crm_sales_details;

		SET @end_time = GETDATE();
		PRINT 'Load Duration : ' + CAST(DATEDIFF(SECOND, @start_time, @end_time) as NVARCHAR) + ' seconds';
		PRINT '------------------------';

		PRINT('------------------------------------');
		PRINT('Loading ERP Tables');
		PRINT('------------------------------------');
		--==================================
		--Table 4
		--==================================
		SET @start_time = GETDATE();
		PRINT '>>Truncating Data';
		TRUNCATE TABLE silver.erp_cust_az12;
		PRINT 'Inserting Data Into: silver.erp_cust_az12';
		INSERT INTO silver.erp_cust_az12 (
			cid,
			bdate,
			gen
		)
		SELECT
			CASE
				WHEN TRIM(cid) LIKE 'NAS%' THEN SUBSTRING(TRIM(cid), 4, LEN(TRIM(cid)))
				ELSE TRIM(cid)
			END AS cid,
	
			CASE
				WHEN bdate > GETDATE() THEN NULL
				ELSE bdate
			END AS bdate,

			CASE
				WHEN UPPER(TRIM(gen)) IN ('F','Female') THEN 'Female'
				WHEN UPPER(TRIM(gen)) IN ('M','Male') THEN 'Male'
				ELSE 'Unknown'
			END AS gen
		FROM bronze.erp_cust_az12;

		SET @end_time = GETDATE();
		PRINT 'Load Duration : ' + CAST(DATEDIFF(SECOND, @start_time, @end_time) as NVARCHAR) + ' seconds';
		PRINT '------------------------';


		--==================================
		--Table 5
		--==================================
		SET @start_time = GETDATE();
		PRINT '>>Truncating Data';
		TRUNCATE TABLE silver.erp_loc_a101;
		PRINT 'Inserting Data Into: silver.erp_loc_a101';
		INSERT INTO silver.erp_loc_a101 (
			cid,
			cntry
		)

		SELECT
			REPLACE(TRIM(cid),'-','') AS cid,
			CASE
				WHEN TRIM(cntry) IN ('DE', 'Germany') THEN 'Germany'
				WHEN TRIM(cntry) IN ('United States', 'US','USA') THEN 'United States'
				WHEN TRIM(cntry) = '' OR cntry IS NULL THEN 'Unknown'
				ELSE TRIM(cntry)
			END AS cntry
		FROM bronze.erp_loc_a101;

		SET @end_time = GETDATE();
		PRINT 'Load Duration : ' + CAST(DATEDIFF(SECOND, @start_time, @end_time) as NVARCHAR) + ' seconds';
		PRINT '------------------------';

		--==================================
		--Table 6
		--==================================
		SET @start_time = GETDATE();
		PRINT '>>Truncating Data';
		TRUNCATE TABLE silver.erp_px_cat_g1v2;
		PRINT 'Inserting Data Into: silver.erp_px_cat_g1v2';
		INSERT INTO silver.erp_px_cat_g1v2 (
			id,
			cat,
			subcat,
			maintenance
		)

		SELECT
			id,
			TRIM(cat) AS cat,
			TRIM(subcat) AS subcat,
			maintenance
		FROM bronze.erp_px_cat_g1v2;

		SET @end_time = GETDATE();
		PRINT 'Load Duration : ' + CAST(DATEDIFF(SECOND, @start_time, @end_time) as NVARCHAR) + ' seconds';
		PRINT '------------------------';


		SET @batch_end_time = GETDATE();
		PRINT('==============================================================');
		PRINT('Loading Silver Layer Completed');
		PRINT '    -Total Load Duration: ' + CAST(DATEDIFF(SECOND,@batch_start_time,@batch_end_time) as NVARCHAR) + ' seconds';
		PRINT('==============================================================');
	END TRY

	BEGIN CATCH
		PRINT '==========================================================';
		PRINT 'ERROR OCCURED WHILE LOADING BRONZE LAYER';
		PRINT 'Error Message : ' + ERROR_MESSAGE();
		PRINT 'Error Number : ' + CAST(ERROR_NUMBER() AS NVARCHAR);
		PRINT 'Error State : ' + CAST(ERROR_STATE() AS NVARCHAR);
		PRINT '==========================================================';
	END CATCH
END
